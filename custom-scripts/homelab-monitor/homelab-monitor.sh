#!/bin/bash

# Konfigurationsdatei f√ºr das Skript
CONFIG_FILE="/root/homelab-monitor.cfg"
ENV_FILE="$GITHUB_REPO/custom-scripts/.env"
# Wenn die Konfigurationsdatei existiert, lade sie
[ -f "$CONFIG_FILE" ] && source "$CONFIG_FILE"
[ -f "$ENV_FILE" ] && source "$ENV_FILE"

# Definition des Remote-Hosts und des Pfads zum Skript auf dem Remote-Host
REMOTE_HOST="$REMOTE_HOST"
REMOTE_SCRIPT_PATH="$GITHUB_REPO/custom-scripts/homelab-monitor/homelab-monitor.sh"
# Benutzername f√ºr SSH-Verbindung
SSH_USER="$SSH_USER"

# √úberpr√ºfen, ob das Skript im manuellen Modus ausgef√ºhrt wird
if [[ "$1" == "--manual" ]]; then
    IS_REMOTE_EXECUTION=1  # Indikator f√ºr Remote-Ausf√ºhrung
    IS_MANUAL_MODE=1       # Indikator f√ºr manuellen Modus
fi

# Wenn das Skript nicht im Remote-Modus ausgef√ºhrt wird
if [[ "$IS_REMOTE_EXECUTION" != "1" ]]; then
    # Kopiere das Skript auf den Remote-Host
    scp "$0" "$SSH_USER@$REMOTE_HOST:$REMOTE_SCRIPT_PATH" >/dev/null
    # F√ºhre das Skript auf dem Remote-Host aus und √ºbergebe die Umgebungsvariablen
    ssh "$SSH_USER@$REMOTE_HOST" IS_REMOTE_EXECUTION=1 IS_MANUAL_MODE="$IS_MANUAL_MODE" bash "$REMOTE_SCRIPT_PATH" "$@"
    exit 0  # Beende das Skript nach der Remote-Ausf√ºhrung
fi

# Initialisiere eine leere JSON-Ausgabe
JSON_OUTPUT="{}"
# Funktion zum Hinzuf√ºgen von Schl√ºssel-Wert-Paaren zur JSON-Ausgabe
append_json() {
    local key="$1"   # Schl√ºssel f√ºr das JSON-Objekt
    local value="$2" # Wert f√ºr das JSON-Objekt
    JSON_OUTPUT=$(jq --arg k "$key" --arg v "$value" '. + {($k): $v}' <<< "$JSON_OUTPUT")  # F√ºge das Paar zur JSON-Ausgabe hinzu
}

# Funktion zur Ermittlung der menschlich lesbaren Systemlast
get_human_load() {
    load_avg=$(awk '{print $1}' /proc/loadavg)  # Lade den Durchschnitt der Systemlast
    cpu_cores=$(nproc)                           # Z√§hle die CPU-Kerne
    load_percent=$(awk "BEGIN {printf \"%.0f\", ($load_avg / $cpu_cores) * 100}")  # Berechne den Prozentsatz der Last
    echo "$load_avg ($load_percent%) von $cpu_cores"  # Gebe die Last und die Anzahl der Kerne aus
}

# F√ºge Informationen zur Systemauslastung zur JSON-Ausgabe hinzu
append_json "uptime" "$(uptime -p)"  # Systemlaufzeit
append_json "load" "$(get_human_load)"  # Systemlast

# Host-RAM-Auslastung via SSH ermitteln
host_mem=$(ssh "$SSH_USER@$REMOTE_HOST" "awk '/MemTotal/ {t=\$2} /MemAvailable/ {a=\$2} END {print t, t-a}' /proc/meminfo")
total=$(echo "$host_mem" | awk '{print int($1/1024)}')  # Gesamt-RAM in MB
used=$(echo "$host_mem" | awk '{print int($2/1024)}')   # Genutztes RAM in MB

# F√ºge die RAM-Auslastung zur JSON-Ausgabe hinzu
append_json "ram" "${used} MB / ${total} MB"

# F√ºge die Festplattenspeicherung zur JSON-Ausgabe hinzu
append_json "disk" "$(df -h / | awk 'END{print $3 " / " $2 " (" $5 ")"}')"
# F√ºge die Temperatur zur JSON-Ausgabe hinzu
append_json "temp" "$(command -v sensors &> /dev/null && sensors | grep -m 1 'Package id 0:' | awk '{print $4}' || echo "nicht verf√ºgbar")"
# F√ºge die √∂ffentliche IP-Adresse zur JSON-Ausgabe hinzu
append_json "ip" "$(curl -s $PUBLIC_IP_URL)"
# F√ºge den Ping-Status zur JSON-Ausgabe hinzu
append_json "ping" "$(ping -c 2 1.1.1.1 > /dev/null && echo "‚úÖ OK" || echo "‚ùå FAIL")"
# F√ºge die letzten Logins zur JSON-Ausgabe hinzu
append_json "logins" "$(last -n 2 | grep -v 'wtmp begins' | grep -v 'still logged in' | paste -sd ';' -)"
# F√ºge die Anzahl der verbundenen Ger√§te zur JSON-Ausgabe hinzu
append_json "devices" "$(ip neigh | grep -v 'FAILED' | wc -l)"
# √úberpr√ºfen, ob das Backup-Skript l√§uft
if pgrep -f "$BACKUP_SCRIPT_NAME" > /dev/null; then
    start_time=$(ps -eo pid,lstart,cmd | grep "$BACKUP_SCRIPT_NAME" | grep -v grep | head -n 1 | tr -s ' ' | cut -d' ' -f2-6 | tr '\n' ' ')
    # F√ºge den Status des Backups zur JSON-Ausgabe hinzu
    append_json "backup" "üü¢ L√§uft seit: $start_time"
else
    # F√ºge an, dass kein Backup l√§uft
    append_json "backup" "üî¥ Kein laufendes Backup."
fi
# √úberpr√ºfen, ob Updates verf√ºgbar sind
updates=$(apt list --upgradable 2>/dev/null | grep -v "Listing..." | wc -l)
# F√ºge die Anzahl der verf√ºgbaren Updates zur JSON-Ausgabe hinzu
append_json "updates" "üîî $updates Updates verf√ºgbar"
# F√ºge die letzten Fehlerprotokolle zur JSON-Ausgabe hinzu
syslog_errors=$(journalctl -p 3 -xb | tail -n 3 | tr '\n' ';')
append_json "logs" "$syslog_errors"
# √úberpr√ºfen, ob VSCode-Server aktiv ist
vscode_status=$(pgrep -f ".vscode-server" > /dev/null && echo "üü¢ aktiv" || echo "üî¥ nicht aktiv")

# √úberwachung der CPU-Last
cpu_cores=$(nproc)  # Z√§hle die CPU-Kerne
load_avg=$(awk '{print $1}' /proc/loadavg)  # Lade den 1-Minuten-Load
load_percent=$(awk "BEGIN {printf \"%.0f\", ($load_avg / $cpu_cores) * 100}")  # Berechne den Prozentsatz

# Wenn das Skript im manuellen Modus ausgef√ºhrt wird, gebe die JSON-Ausgabe aus
if [[ "$IS_MANUAL_MODE" == "1" ]]; then
  echo "$JSON_OUTPUT"
  exit 0  # Beende das Skript nach der Ausgabe
fi
